<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Desempeño de Vendedores</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/chart.js@3.7.1/dist/chart.min.css">
    <!-- Reutiliza tus estilos existentes -->
    <link rel="stylesheet" href="/static/css/navbar.css">
    <link rel="stylesheet" href="/static/css/scrollbar.css">
    <link rel="stylesheet" href="/static/css/vendedores.css">
   
    <style>
        /* Estilos específicos para esta página */
        .auditoria-main-container {
            padding: 20px;
            max-width: 1400px;
            margin: 0 auto;
        }
        
        .auditoria-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        
        .auditoria-header h1 {
            color: var(--color-text-primary);
            font-size: 1.5rem;
            font-weight: 600;
            display: inline-flex;
            align-items: center;
            gap: 0.7rem;
        }
        
        .card-style {
            background: var(--color-background-medium);
            border-radius: var(--border-radius-large);
            border: 1px solid var(--color-border);
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.25), 0 1px 3px rgba(0,0,0,0.1);
            padding: 20px;
            margin-bottom: 20px;
        }
        
        .table-filters {
            display: flex;
            gap: 15px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }
        
        .filter-group {
            flex: 1;
            min-width: 200px;
        }
        
        .filter-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-size: 0.9rem;
            color: var(--color-text-secondary);
            font-weight: 500;
        }
        
        .filter-input, .filter-select {
            width: 100%;
            padding: 0.7rem 1rem;
            background-color: var(--color-background-dark);
            border: 1px solid var(--color-border);
            border-radius: var(--border-radius-medium);
            color: var(--color-text-primary);
            font-size: 0.9rem;
            transition: all 0.2s ease;
        }
        
        .filter-input:focus, .filter-select:focus {
            outline: none;
            border-color: var(--color-info);
            box-shadow: 0 0 0 3px rgba(88, 166, 255, 0.2);
        }
        
        .filter-select {
            appearance: none;
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='%238b949e' viewBox='0 0 16 16'%3E%3Cpath d='M7.247 11.14 2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z'/%3E%3C/svg%3E");
            background-repeat: no-repeat;
            background-position: right 0.75rem center;
            background-size: 16px 12px;
        }
        
        .totals-container {
            display: flex;
            gap: 15px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }
        
        .total-card {
            flex: 1;
            min-width: 200px;
            background-color: var(--color-background-light);
            border-radius: var(--border-radius-medium);
            border: 1px solid var(--color-border);
            padding: 15px;
            text-align: center;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }
        
        .total-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }
        
        .total-card h3 {
            margin: 0 0 5px 0;
            font-size: 0.9rem;
            color: var(--color-text-secondary);
            text-transform: uppercase;
            font-weight: 500;
        }
        
        .total-value {
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--color-accent);
        }
        
        .chart-container {
            height: 400px;
            margin-bottom: 20px;
            position: relative;
            background-color: var(--color-background-light);
            padding: 1.5rem 2rem;
            border-radius: var(--border-radius-medium);
            border: 1px solid var(--color-border);
        }
        
        .table-responsive {
            overflow-x: auto;
        }
        
        .auditoria-table {
            width: 100%;
            border-collapse: collapse;
            font-size: 0.85rem;
        }
        
        .auditoria-table th, 
        .auditoria-table td {
            padding: 12px 15px;
            border-bottom: 1px solid var(--color-border);
            text-align: left;
        }
        
        .auditoria-table th {
            background-color: var(--color-background-light);
            font-weight: 600;
            color: var(--color-text-primary);
            position: sticky;
            top: 0;
        }
        
        .positive {
            color: var(--color-success);
            font-weight: 500;
        }
        
        .negative {
            color: var(--color-danger);
            font-weight: 500;
        }
        
        .text-center {
            text-align: center;
        }
        
        .text-right {
            text-align: right;
        }
        
        .table-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }
        
        .table-actions {
            display: flex;
            gap: 10px;
            align-items: center;
        }
        
        .table-search {
            padding: 0.7rem 1rem;
            background-color: var(--color-background-dark);
            border: 1px solid var(--color-border);
            border-radius: var(--border-radius-medium);
            color: var(--color-text-primary);
            font-size: 0.9rem;
            width: 250px;
            transition: all 0.2s ease;
        }
        
        .table-search:focus {
            outline: none;
            border-color: var(--color-info);
            box-shadow: 0 0 0 3px rgba(88, 166, 255, 0.2);
        }
        
        .table-totals {
            background-color: var(--color-background-light);
            font-weight: 600;
        }
        
        .table-totals td {
            border-top: 2px solid var(--color-border);
            border-bottom: none;
        }
        
        .table-date-filter {
            display: flex;
            gap: 10px;
            align-items: center;
        }
        
        .table-date-filter input {
            width: 120px;
            padding: 0.7rem 1rem;
            background-color: var(--color-background-dark);
            border: 1px solid var(--color-border);
            border-radius: var(--border-radius-medium);
            color: var(--color-text-primary);
            font-size: 0.9rem;
        }
        
        .btn {
            padding: 0.7rem 1.3rem;
            border: none;
            border-radius: var(--border-radius-medium);
            cursor: pointer;
            font-weight: 600;
            font-size: 0.9rem;
            transition: all 0.2s ease;
            display: inline-flex;
            align-items: center;
            gap: 0.6rem;
            justify-content: center;
            text-decoration: none;
            line-height: 1.4;
            white-space: nowrap;
            box-shadow: 0 1px 0 rgba(27, 31, 36, 0.04), inset 0 1px 0 rgba(255, 255, 255, 0.25);
        }
        
        .btn i {
            font-size: 1em;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.15);
        }
        
        .btn:active {
            transform: translateY(0px);
            box-shadow: 0 1px 0 rgba(27, 31, 36, 0.04);
        }
        
        .btn-primary {
            background-color: var(--color-green-progress);
            color: #fff;
            border: 1px solid rgba(255,255,255,0.1);
        }
        
        .btn-primary:hover {
            background-color: #2ea043;
            border-color: rgba(255,255,255,0.15);
        }
        
        .btn-secondary {
            background-color: var(--color-background-light);
            color: var(--color-text-secondary);
            border: 1px solid var(--color-border);
            box-shadow: none;
        }
        
        .btn-secondary:hover {
            background-color: #30363d;
            color: var(--color-text-primary);
            border-color: #4b5563;
        }
        
        @media (max-width: 768px) {
            .table-filters {
                flex-direction: column;
            }
            
            .filter-group {
                min-width: 100%;
            }
            
            .totals-container {
                flex-direction: column;
            }
            
            .total-card {
                min-width: 100%;
            }
            
            .table-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 10px;
            }
            
            .table-search {
                width: 100%;
            }
            
            .table-date-filter {
                flex-direction: column;
                align-items: flex-start;
                width: 100%;
            }
            
            .table-date-filter input {
                width: 100%;
            }
        }
    </style>
</head>
<body>
    <%- include('partials/navbar') %>
    
    <div class="auditoria-main-container">
        <div class="auditoria-header">
            <h1><i class="fas fa-chart-line"></i> Desempeño de Vendedores</h1>
        </div>
        
        <!-- Filtros principales -->
        <div class="card-style">
            <form method="GET" action="/vendedores/desempeno">
                <div class="table-filters">
                    <div class="filter-group">
                        <label for="start_date">Fecha Inicio</label>
                        <input type="date" id="start_date" name="start_date" value="<%= startDate %>" class="filter-input" required>
                    </div>
                    
                    <div class="filter-group">
                        <label for="end_date">Fecha Fin</label>
                        <input type="date" id="end_date" name="end_date" value="<%= endDate %>" class="filter-input" required>
                    </div>
                    
                    <div class="filter-group">
                        <label for="username">Cuenta</label>
                        <select id="username" name="username" class="filter-select">
                            <option value="">Todos los usuarios</option>
                            <% usernames.forEach(username => { %>
                                <option value="<%= username %>" <%= username === selectedUsername ? 'selected' : '' %>>
                                    <%= username %>
                                </option>
                            <% }); %>
                        </select>
                    </div>
                    
                    <div class="filter-group">
                        <label for="vendedor">Cliente</label>
                        <select id="vendedor" name="vendedor" class="filter-select">
                            <option value="">Todos los Clientes</option>
                            <% vendedores.forEach(vendedor => { %>
                                <option value="<%= vendedor.id %>" <%= vendedor.id.toString() === selectedVendedor ? 'selected' : '' %>>
                                    <%= vendedor.nombre %>
                                </option>
                            <% }); %>
                        </select>
                    </div>
                    
                    <div class="filter-group" style="align-self: flex-end;">
                        <button type="submit" class="btn btn-primary"><i class="fas fa-filter"></i> Filtrar</button>
                        <a href="/vendedores/desempeno" class="btn btn-secondary" style="margin-left: 10px;">
                            <i class="fas fa-sync-alt"></i> Limpiar
                        </a>
                    </div>
                </div>
            </form>
        </div>
        
        <!-- Totales -->
        <div class="totals-container">
            <div class="total-card">
                <h3>Mensajes Automáticos</h3>
                <div class="total-value"><%= totals.mensajes.toLocaleString() %></div>
            </div>
            
            <div class="total-card">
                <h3>Mensajes Manuales</h3>
                <div class="total-value"><%= totals.manuales.toLocaleString() %></div>
            </div>
            
            <div class="total-card">
                <h3>Respuestas Recibidas</h3>
                <div class="total-value"><%= totals.respuestas.toLocaleString() %></div>
            </div>
            
            <div class="total-card">
                <h3>Tasa de Respuesta</h3>
                <div class="total-value <%= totals.mensajes > 0 ? (totals.respuestas/totals.mensajes*100 > 10 ? 'positive' : 'negative') : '' %>">
                    <%= totals.mensajes > 0 ? (totals.respuestas/totals.mensajes*100).toFixed(1) + '%' : 'N/A' %>
                </div>
            </div>
        </div>
        
        <!-- Gráfico -->
        <div class="card-style">
            <div class="card-header">
                <h2><i class="fas fa-chart-bar"></i> Actividad por Día</h2>
            </div>
            <div class="chart-container">
                <canvas id="performanceChart"></canvas>
            </div>
        </div>
        
        <!-- Tabla de Detalles -->
        <div class="card-style">
            <div class="card-header">
                <div class="table-header">
                    <h2><i class="fas fa-table"></i> Detalle de Actividad</h2>
                    <div class="table-actions">
                        <div class="table-date-filter">
                            <input type="date" id="tableStartDate" class="filter-input" placeholder="Desde">
                            <input type="date" id="tableEndDate" class="filter-input" placeholder="Hasta">
                        </div>
                        <input type="text" id="tableSearch" class="table-search" placeholder="Buscar en tabla...">
                    </div>
                </div>
            </div>
            <div class="table-responsive">
                <table class="auditoria-table" id="detailTable">
                    <thead>
                        <tr>
                            <th>Cliente</th>
                            <th>Usuario IG</th>
                            <th class="text-center">Fecha</th>
                            <th class="text-center">Mensajes Auto</th>
                            <th class="text-center">Mensajes Manual</th>
                            <th class="text-center">Respuestas</th>
                            <th class="text-center">Tasa Respuesta</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% if (tableData.length > 0) { %>
                            <% tableData.forEach(row => { %>
                                <tr class="data-row" data-date="<%= new Date(row.fecha).toISOString().split('T')[0] %>">
                                    <td><%= row.vendedor || 'N/A' %></td>
                                    <td><%= row.insta_username %></td>
                                    <td class="text-center"><%= new Date(row.fecha).toLocaleDateString('es-ES') %></td>
                                    <td class="text-center"><%= row.mensajes_enviados %></td>
                                    <td class="text-center"><%= row.mensajes_manuales %></td>
                                    <td class="text-center"><%= row.respuestas_recibidas %></td>
                                    <td class="text-center <%= row.tasa_respuesta > 10 ? 'positive' : 'negative' %>">
                                        <%= row.tasa_respuesta %>%
                                    </td>
                                </tr>
                            <% }); %>
                            <tr class="table-totals">
                                <td colspan="3" class="text-right"><strong>Totales:</strong></td>
                                <td class="text-center" id="totalAuto">0</td>
                                <td class="text-center" id="totalManual">0</td>
                                <td class="text-center" id="totalRespuestas">0</td>
                                <td class="text-center" id="totalTasa">0%</td>
                            </tr>
                        <% } else { %>
                            <tr>
                                <td colspan="7" style="text-align: center;">No se encontraron datos con los filtros seleccionados</td>
                            </tr>
                        <% } %>
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.7.1/dist/chart.min.js"></script>
    <script>
        // Parsear los datos del gráfico desde el servidor
        const rawChartData = <%- chartData %>;
        
        // Preparar datos para el gráfico
        const labels = rawChartData.map(item => {
            const date = new Date(item.fecha);
            return date.toLocaleDateString('es-ES', { day: 'numeric', month: 'short' });
        });
        
        const mensajesData = rawChartData.map(item => item.total_mensajes);
        const manualesData = rawChartData.map(item => item.total_manuales);
        const respuestasData = rawChartData.map(item => item.total_respuestas);
        
        // Configuración del gráfico
        const ctx = document.getElementById('performanceChart').getContext('2d');
        const chart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [
                    {
                        label: 'Mensajes Automáticos',
                        data: mensajesData,
                        backgroundColor: 'rgba(67, 97, 238, 0.2)',
                        borderColor: 'rgba(67, 97, 238, 1)',
                        borderWidth: 2,
                        tension: 0.1,
                        fill: true
                    },
                    {
                        label: 'Mensajes Manuales',
                        data: manualesData,
                        backgroundColor: 'rgba(255, 159, 64, 0.2)',
                        borderColor: 'rgba(255, 159, 64, 1)',
                        borderWidth: 2,
                        tension: 0.1,
                        fill: true
                    },
                    {
                        label: 'Respuestas Recibidas',
                        data: respuestasData,
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        borderColor: 'rgba(75, 192, 192, 1)',
                        borderWidth: 2,
                        tension: 0.1,
                        fill: true
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'top',
                    },
                    tooltip: {
                        mode: 'index',
                        intersect: false,
                        callbacks: {
                            label: function(context) {
                                return context.dataset.label + ': ' + context.parsed.y.toLocaleString();
                            }
                        }
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            precision: 0,
                            callback: function(value) {
                                return value.toLocaleString();
                            }
                        }
                    }
                },
                interaction: {
                    mode: 'nearest',
                    axis: 'x',
                    intersect: false
                }
            }
        });

        // Función para calcular y mostrar los totales
        function updateTotals() {
            let totalAuto = 0;
            let totalManual = 0;
            let totalRespuestas = 0;
            
            document.querySelectorAll('#detailTable tbody tr.data-row').forEach(row => {
                if (row.style.display !== 'none') {
                    const auto = parseInt(row.cells[3].textContent) || 0;
                    const manual = parseInt(row.cells[4].textContent) || 0;
                    const resp = parseInt(row.cells[5].textContent) || 0;
                    
                    totalAuto += auto;
                    totalManual += manual;
                    totalRespuestas += resp;
                }
            });
            
            document.getElementById('totalAuto').textContent = totalAuto.toLocaleString();
            document.getElementById('totalManual').textContent = totalManual.toLocaleString();
            document.getElementById('totalRespuestas').textContent = totalRespuestas.toLocaleString();
            
            const tasa = totalAuto > 0 ? (totalRespuestas / totalAuto * 100).toFixed(1) + '%' : '0%';
            const tasaElement = document.getElementById('totalTasa');
            tasaElement.textContent = tasa;
            tasaElement.className = 'text-center ' + (totalAuto > 0 ? (totalRespuestas/totalAuto*100 > 10 ? 'positive' : 'negative') : '');
        }

        // Filtrado de la tabla por texto
        document.getElementById('tableSearch').addEventListener('input', function() {
            const searchTerm = this.value.toLowerCase();
            filterTable(searchTerm);
        });

        // Filtrado de la tabla por fecha
        document.getElementById('tableStartDate').addEventListener('change', filterByDate);
        document.getElementById('tableEndDate').addEventListener('change', filterByDate);

        function filterByDate() {
            const startDate = document.getElementById('tableStartDate').value;
            const endDate = document.getElementById('tableEndDate').value;
            
            document.querySelectorAll('#detailTable tbody tr.data-row').forEach(row => {
                const rowDate = row.getAttribute('data-date');
                let shouldShow = true;
                
                if (startDate && rowDate < startDate) {
                    shouldShow = false;
                }
                
                if (endDate && rowDate > endDate) {
                    shouldShow = false;
                }
                
                if (shouldShow) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
            
            updateTotals();
        }

        function filterTable(searchTerm) {
            document.querySelectorAll('#detailTable tbody tr.data-row').forEach(row => {
                const rowText = row.textContent.toLowerCase();
                if (rowText.includes(searchTerm)) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
            
            updateTotals();
        }

        // Inicializar los totales al cargar la página
        document.addEventListener('DOMContentLoaded', function() {
            updateTotals();
            
            // Establecer fechas por defecto para el filtro de tabla
            const today = new Date().toISOString().split('T')[0];
            document.getElementById('tableEndDate').value = today;
            
            const thirtyDaysAgo = new Date();
            thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
            document.getElementById('tableStartDate').value = thirtyDaysAgo.toISOString().split('T')[0];
        });
    </script>
</body>
</html>