<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Auditoria actividades</title>
    <!-- FontAwesome y Google Fonts (Poppins) -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" integrity="sha512-iecdLmaskl7CVkqkXNQ/ZH/XLlvWZOJyj7Yy7tcenmpD1ypASozpmT/E0iPtmFIB46ZmdtAc9eNBvH0H/ZpiBw==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <!-- CSS de la Navbar y Scrollbar -->
    <link rel="stylesheet" href="/static/css/navbar.css" />
    <link rel="stylesheet" href="/static/css/scrollbar.css" />
    <!-- CSS específico y completo para Vendedores -->
    <link rel="stylesheet" href="/static/css/vendedores.css" />
    <link rel="stylesheet" href="/static/css/gadiel.css" />
    <!-- Chart.js y Adaptador de Fecha (desde CDN) -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns@2.0.0/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
    <%# Pasar datos iniciales a JS de forma segura %>
    <script>
      // Define la variable global ANTES de que se cargue vendedores_manager.js
      const initialDashboardDataForChart = <%- JSON.stringify(initialDashboard || { chartData: [], totalMensajes: 0 }) %>;
    </script>

</head>
<body>
    <%- include('partials/navbar') %>

    <div class="vendedor-main-container">
        <!-- ============================================= -->
        <!--    ENCABEZADO Y FILTROS PARA VENDEDORES     -->
        <!-- ============================================= -->
        <div class="vendedor-section-header">
             <div class="header-title-button">
                <h2><i class="fas fa-id-card-alt icon-header"></i> Auditoria Individuales</h2>
                <% if (typeof user !== 'undefined' && user && (user.role === 'admin' || user.role === 'auditoria')) { %>
                    <button class="btn btn-primary btn-add-vendedor" onclick="openVendedorModal()">
                        <i class="fas fa-user-plus"></i> Agregar Cliente <%# Cambiado texto %>
                    </button>
                <% } %>
             </div>
             <!-- Contenedor para ambos filtros -->
             <div class="seller-filter-container">
                 <!-- Filtro por Nombre -->
                 <div class="filter-item">
                    <i class="fas fa-search filter-icon"></i>
                    <input type="text" id="seller-name-filter" placeholder="Filtrar por nombre cliente..."> <%# Cambiado placeholder %>
                 </div>
                 <!-- Filtro por Plan -->
                 <div class="filter-item">
                    <i class="fas fa-tags filter-icon"></i>
                    <select id="plan-filter">
                        <option value="">Todos los Planes</option>
                        <% if (typeof distinctPlans !== 'undefined' && distinctPlans && distinctPlans.length > 0) { %>
                            <% distinctPlans.forEach(plan => { %>
                                <%# Asegurarse que el valor sea consistente (ej. lowercase) %>
                                <option value="<%= plan.toLowerCase() %>"><%= plan %></option>
                            <% }); %>
                        <% } %>
                    </select>
                 </div>
             </div>
             <!-- Botón Mostrar Todos (se moverá aquí por JS) -->
             <button id="show-all-btn" class="btn btn-info btn-sm" style="display: none;"> <%# Oculto inicialmente, JS lo configura y muestra %>
                <i class="fas fa-eye"></i> Mostrar Todos
             </button>
        </div>

        <!-- Mensajes de Feedback Globales -->
        <%# Asegúrate de tener configurado connect-flash y el middleware para que res.locals.success_msg y res.locals.error_msg funcionen %>
        <% if (locals.success_msg) { %><div class="alert alert-success global-feedback" role="alert"><%= locals.success_msg %></div><% } %>
        <% if (locals.error_msg) { %><div class="alert alert-danger global-feedback" role="alert"><%= locals.error_msg %></div><% } %>
        <%# Fallback por si no usas res.locals %>
        <% if (!locals.success_msg && typeof success !== 'undefined' && success) { %><div class="alert alert-success global-feedback" role="alert"><%= success %></div><% } %>
        <% if (!locals.error_msg && typeof error !== 'undefined' && error && (!req || !req.originalUrl || !req.originalUrl.includes('dashboard-data'))) { %>
            <div class="alert alert-danger global-feedback" role="alert"><%= error %></div>
        <% } %>


        <!-- ============================================= -->
        <!--         NUEVA SECCIÓN DE RESUMEN             -->
        <!-- ============================================= -->
        <div class="resumen-vendedores-container">
            <div class="resumen-header">
                <h3><i class="fas fa-list-ol"></i> Resumen de Clientes</h3>
                <button id="toggle-resumen" class="btn btn-sm btn-outline-secondary">
                    <i class="fas fa-chevron-up"></i> Contraer
                </button>
            </div>

            <div class="resumen-list-container custom-scrollbar" id="resumen-list">
                <% if (typeof vendedores !== 'undefined' && vendedores && Array.isArray(vendedores) && vendedores.length > 0) { %>
                    <table class="resumen-table">
                        <thead>
                            <tr>
                                <th>Nombre</th>
                                <th>Estado</th>
                                <th>Cuentas</th>
                                <th>Bot (Hoy)</th>
                                <th>Manual (Hoy)</th>
                                <th>Resp (Hoy)</th>
                                <th>Total Msgs (Mes)</th> <%# Clarificado %>
                                <th>Total Resp (Mes)</th> <%# Clarificado %>
                                <th>Cumplimiento</th>
                                <th>Progreso</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% vendedores.forEach(vendedor => { %>
                                <%# --- INICIO: Lógica para determinar la clase CSS del estado --- %>
                                <%
                                    let estadoClass = 'tag-estado-default';
                                    let estadoTexto = vendedor.estado || 'Desconocido';
                                    if (vendedor.estado) {
                                        const estadoLower = String(vendedor.estado).toLowerCase().trim();
                                        if (estadoLower === 'al dia' || estadoLower === 'al día' || estadoLower === 'activo') {
                                            estadoClass = 'tag-estado-verde';
                                            estadoTexto = 'Al día';
                                        } else if (estadoLower === '1 - 5') {
                                            estadoClass = 'tag-estado-amarillo';
                                            estadoTexto = '1 - 5';
                                        } else if (estadoLower === '5 a 15') {
                                            estadoClass = 'tag-estado-naranja';
                                            estadoTexto = '5 a 15';
                                        } else if (estadoLower === '+15') {
                                            estadoClass = 'tag-estado-rojo';
                                            estadoTexto = '+15';
                                        } else if (estadoLower === 'inactivo') {
                                            estadoClass = 'tag-estado-gris';
                                            estadoTexto = 'Inactivo';
                                        }
                                        // Añade más estados si los tienes
                                    }
                                %>
                                <tr class="resumen-item"
                                    data-vendedor-id="<%= vendedor.id %>"
                                    data-plan="<%= vendedor.plan ? vendedor.plan.toLowerCase() : '' %>"
                                    data-nombre="<%= vendedor.nombre.toLowerCase() %>">
                                    <td class="resumen-nombre">
                                        <span><%= vendedor.nombre %></span>
                                        <% if (vendedor.manager_asignado) { %>
                                            <small><i class="fas fa-user-tie"></i> <%= vendedor.manager_asignado %></small>
                                        <% } %>
                                    </td>
                                    <td>
                                        <span class="tag tag-estado <%= estadoClass %>"><%= estadoTexto %></span>
                                    </td>
                                    <td><%= vendedor.num_cuentas || 0 %></td>
                                    <td class="mensaje-count"><%= vendedor.totalMensajesHoy || 0 %></td>
                                    <td class="mensaje-count"><%= vendedor.totalMensajesManualesHoy || 0 %></td>
                                    <td class="mensaje-count"><%= vendedor.totalRespuestasHoy || 0 %></td>
                                    <td class="mensaje-count"><%= (vendedor.total_mensajes_mes || 0).toLocaleString('es-ES') %></td>
                                    <td class="mensaje-count"><%= (vendedor.total_respuestas_mes || 0).toLocaleString('es-ES') %></td> <%# Mostrando total de respuestas del mes %>
                                    <td><%= parseFloat(vendedor.porcentaje_cumplimiento || 0).toFixed(1) %>%</td>
                                    <td>
                                        <%# Progreso basado en mensajes del mes vs objetivo %>
                                        <div class="mini-progress-container" title="Progreso Objetivo Msgs: <%= parseFloat(vendedor.progreso_mensajes_mes_pct || 0).toFixed(1) %>% (<%= (vendedor.total_mensajes_mes || 0).toLocaleString('es-ES') %> / <%= (vendedor.objetivo_mensual && vendedor.objetivo_mensual > 0) ? (vendedor.objetivo_mensual || 0).toLocaleString('es-ES') : 'N/A' %>)">
                                            <div class="mini-progress-bar"
                                                 style="width: <%= Math.min(100, parseFloat(vendedor.progreso_mensajes_mes_pct || 0)) %>%;
                                                        background-color: <%= parseFloat(vendedor.progreso_mensajes_mes_pct || 0) >= 100 ? 'var(--color-green-progress)' : (parseFloat(vendedor.progreso_mensajes_mes_pct || 0) > 50 ? 'var(--color-accent)' : 'var(--color-warning)') %>;">
                                            </div>
                                            <span class="mini-progress-text"><%= parseFloat(vendedor.progreso_mensajes_mes_pct || 0).toFixed(0) %>%</span>
                                        </div>
                                    </td>
                                </tr>
                            <% }); %>
                        </tbody>
                    </table>
                <% } else { %>
                    <p class="no-data-global" style="padding: 1rem;">No hay Clientes registrados actualmente.</p>
                <% } %>
            </div>
        </div>

        <!-- Contenedor de Cards de Vendedores (oculto inicialmente) -->
        <div class="vendedor-cards-grid" id="vendedor-cards-container">
            <% if (typeof vendedores !== 'undefined' && vendedores && Array.isArray(vendedores) && vendedores.length > 0) { %>
                <% vendedores.forEach(vendedor => { %>
                     <%# --- Lógica para determinar la clase CSS del estado (para la tarjeta) --- %>
                     <%
                        let estadoCardClass = 'tag-estado-default';
                        let estadoCardTexto = vendedor.estado || 'Desconocido';
                        if (vendedor.estado) {
                             const estadoLower = String(vendedor.estado).toLowerCase().trim();
                             if (estadoLower === 'al dia' || estadoLower === 'al día' || estadoLower === 'activo') {
                                 estadoCardClass = 'tag-estado-verde';
                                 estadoCardTexto = 'Al día';
                             } else if (estadoLower === '1 - 5') {
                                 estadoCardClass = 'tag-estado-amarillo';
                                 estadoCardTexto = '1 - 5';
                             } else if (estadoLower === '5 a 15') {
                                 estadoCardClass = 'tag-estado-naranja';
                                 estadoCardTexto = '5 a 15';
                             } else if (estadoLower === '+15') {
                                 estadoCardClass = 'tag-estado-rojo';
                                 estadoCardTexto = '+15';
                             } else if (estadoLower === 'inactivo') {
                                 estadoCardClass = 'tag-estado-gris';
                                 estadoCardTexto = 'Inactivo';
                             }
                             // Añade más estados si los tienes
                        }
                     %>
                    <div class="vendedor-card"
                         id="vendedor-card-<%= vendedor.id %>"
                         data-vendedor='<%- JSON.stringify(vendedor) %>' <%# Pasar todos los datos del vendedor %>
                         data-plan="<%= vendedor.plan ? vendedor.plan.toLowerCase() : '' %>"
                         data-nombre="<%= vendedor.nombre.toLowerCase() %>">
                        <div class="card-header">
                             <span class="tag tag-estado <%= estadoCardClass %>" title="Estado: <%= estadoCardTexto %>"><%= estadoCardTexto %></span>
                            <h3 class="vendedor-nombre"><%= vendedor.nombre %></h3>
                            <% if (vendedor.manager_asignado) { %><small class="manager"><i class="fas fa-user-tie"></i> Manager: <%= vendedor.manager_asignado %></small><% } %>
                        </div>
                        <div class="card-body">
                            <div class="card-section">
                                <h4><i class="fab fa-instagram"></i> Cuentas (<%= vendedor.num_cuentas || 0 %>)</h4>
                                <%# Mostrar cuentas del vendedor (del campo cuentas_asignadas) %>
                                <% if (vendedor.cuentas_asignadas && Array.isArray(vendedor.cuentas_asignadas) && vendedor.cuentas_asignadas.length > 0) { %>
                                    <ul class="account-list custom-scrollbar">
                                        <%
                                            // Usamos cuentasDetalle para obtener los datos de HOY para cada cuenta asignada
                                            const cuentasHoyMap = (vendedor.cuentasDetalle || []).reduce((map, detalle) => {
                                                map[detalle.nombre] = detalle;
                                                return map;
                                            }, {});
                                        %>
                                        <% vendedor.cuentas_asignadas.forEach(cuentaNombre => { %>
                                            <% const detalleCuentaHoy = cuentasHoyMap[cuentaNombre] || { mensajesHoy: 0, mensajesManualesHoy: 0, respuestasHoy: 0 }; %>
                                            <li>
                                                <span class="tag tag-cuenta"><%= cuentaNombre %></span>
                                                <span class="account-stats" title="Hoy (Bot/Manual/Resp)">
                                                     (<%= detalleCuentaHoy.mensajesHoy %> / <%= detalleCuentaHoy.mensajesManualesHoy %> / <%= detalleCuentaHoy.respuestasHoy %>)
                                                </span>
                                            </li>
                                        <% }); %>
                                    </ul>
                                <% } else { %><p class="no-data"><small>Sin cuentas asignadas.</small></p><% } %>
                            </div>
                            <div class="card-section card-stats">
                                <div class="stat-item">
                                    <label><i class="far fa-clock"></i> Hoy</label>
                                    <span title="Bot / Manual / Respuestas"><%= vendedor.totalMensajesHoy || 0 %> B / <%= vendedor.totalMensajesManualesHoy || 0 %> M / <%= vendedor.totalRespuestasHoy || 0 %> R</span>
                                </div>
                                <div class="stat-item">
                                    <label><i class="fas fa-chart-line"></i> Total Mensajes (Mes)</label>
                                    <span><%= (vendedor.total_mensajes_mes || 0).toLocaleString('es-ES') %></span>
                                </div>
                                <div class="stat-item">
                                    <label><i class="fas fa-reply"></i> Total Respuestas (Mes)</label>
                                    <span><%= (vendedor.total_respuestas_mes || 0).toLocaleString('es-ES') %></span>
                                </div>
                                <% if (vendedor.fecha_ingreso) { %>
                                <div class="stat-item">
                                    <label><i class="far fa-calendar-alt"></i> Ingreso</label>
                                    <span><%= new Date(vendedor.fecha_ingreso).toLocaleDateString('es-ES', { year: 'numeric', month: '2-digit', day: '2-digit'}) %></span>
                                </div>
                                <% } %>
                                <% if (vendedor.plan) { %> <%# Mostrar Plan si existe %>
                                <div class="stat-item">
                                    <label><i class="fas fa-tag"></i> Plan</label>
                                    <span><%= vendedor.plan %></span>
                                </div>
                                <% } %>
                                <% if (vendedor.tipo_cuenta) { %> <%# Mostrar Tipo Cuenta si existe %>
                                <div class="stat-item">
                                    <label><i class="fas fa-briefcase"></i> Tipo</label>
                                    <span><%= vendedor.tipo_cuenta %></span>
                                </div>
                                <% } %>

                                <div class="stat-item stat-progress">
                                    <label><i class="fas fa-tasks"></i> Progreso Mes (Msgs)</label>
                                    <div class="progress-info">
                                         <span class="progress-numbers" title="Mensajes enviados este mes / Objetivo mensual">
                                             <%= (vendedor.total_mensajes_mes || 0).toLocaleString('es-ES') %> / <%= (vendedor.objetivo_mensual && vendedor.objetivo_mensual > 0) ? (vendedor.objetivo_mensual || 0).toLocaleString('es-ES') : 'N/A' %>
                                         </span>
                                         <span class="progress-percentage">
                                             (<%= (vendedor.objetivo_mensual && vendedor.objetivo_mensual > 0) ? parseFloat(vendedor.progreso_mensajes_mes_pct || 0).toFixed(0) + '%' : '--' %>)
                                         </span>
                                    </div>
                                    <div class="progress-bar-container" title="<%= (vendedor.objetivo_mensual && vendedor.objetivo_mensual > 0) ? parseFloat(vendedor.progreso_mensajes_mes_pct || 0).toFixed(1) + '% del objetivo mensual' : 'Sin objetivo definido' %>">
                                        <div class="progress-bar" style="width: <%= (vendedor.objetivo_mensual && vendedor.objetivo_mensual > 0) ? Math.min(100, parseFloat(vendedor.progreso_mensajes_mes_pct || 0)) : 0 %>%;"></div>
                                    </div>
                                </div>
                            </div>
                             <% if (typeof user !== 'undefined' && user && (user.role === 'admin' || user.role === 'auditoria')) { %>
                                <div class="card-section">
                                    <h4><i class="far fa-clipboard"></i> Notas</h4>
                                    <p class="notas custom-scrollbar"><%= vendedor.notas_auditoria || 'Sin notas.' %></p>
                                </div>
                            <% } %>
                        </div>
                        <div class="card-footer">
                             <% if (typeof user !== 'undefined' && user && (user.role === 'admin' || user.role === 'auditoria')) { %>
                                <button class="btn btn-sm btn-secondary" onclick="openDesempenoModal('<%= vendedor.id %>')" title="Registrar desempeño diario"><i class="fas fa-calendar-plus"></i> Registrar Hoy</button>
                                <button class="btn btn-sm btn-warning" onclick="openVendedorModal('<%= vendedor.id %>')" title="Editar cliente"><i class="fas fa-edit"></i> Editar</button> <%# Cambiado title %>
                            <% } %>
                            <a href="/vendedores/<%= vendedor.id %>/historial" class="btn btn-sm btn-info" title="Ver historial"><i class="fas fa-history"></i> Historial</a>
                        </div>
                    </div>
                 <% }); %>
             <% } else { %>
                 <p class="no-data-global" style="padding: 1rem;">No hay Clientes registrados actualmente.</p>
             <% } %>
             <p id="no-seller-found-message" class="no-data-global" style="display: none; padding: 1rem;">No se encontraron Clientes que coincidan con los filtros.</p>
        </div> <!-- Fin Grid -->

    </div> <!-- Fin vendedor-main-container -->

    <!-- ============================================= -->
    <!--         MODAL AGREGAR/EDITAR VENDEDOR         -->
    <!-- ============================================= -->
    <div id="vendedorModalOverlay" class="modal-overlay">
         <div class="modal-content" id="vendedorModalContent">
            <form action="/vendedores" method="POST" id="vendedor-form"> <%# Acción apunta a /vendedores para POST %>
                <div class="modal-header">
                    <h5 class="modal-title" id="vendedorModalLabel">Agregar Cliente</h5> <%# Título por defecto %>
                    <button type="button" class="modal-close-btn" onclick="closeVendedorModal()" title="Cerrar">×</button>
                </div>
                <div class="modal-body custom-scrollbar">
                    <input type="hidden" id="vendedor_id" name="vendedor_id">
                    <div class="form-row">
                        <div class="form-group">
                            <label for="modal_nombre"><i class="fas fa-user fa-fw"></i> Nombre Cliente*</label>
                            <!-- **** MODIFICADO: Input con datalist **** -->
                            <input type="text" id="modal_nombre" name="nombre" list="clientes-datalist" required autocomplete="off" placeholder="Escriba o seleccione un cliente...">
                            <datalist id="clientes-datalist">
                                <% if (typeof distinctClientNames !== 'undefined' && distinctClientNames && distinctClientNames.length > 0) { %>
                                    <% distinctClientNames.forEach(cliente => { %>
                                        <option value="<%= cliente %>"></option>
                                    <% }); %>
                                <% } %>
                            </datalist>
                            <!-- **** FIN MODIFICADO **** -->
                        </div>
                        <div class="form-group">
                             <label for="modal_manager_asignado"><i class="fas fa-user-tie fa-fw"></i> Manager Asignado</label>
                            <input type="text" id="modal_manager_asignado" name="manager_asignado">
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="modal_cuentas_asignadas"><i class="fab fa-instagram fa-fw"></i> Cuentas Instagram (separadas por coma)</label>
                        <!-- **** MODIFICADO: Placeholder **** -->
                        <input type="text" id="modal_cuentas_asignadas" name="cuentas_asignadas" placeholder="Se autocompletarán si selecciona un cliente existente">
                        <!-- **** FIN MODIFICADO **** -->
                    </div>
                    <div class="form-row">
                         <div class="form-group">
                            <label for="modal_porcentaje_cumplimiento"><i class="fas fa-percent fa-fw"></i> % Cumplimiento (Ref.)</label>
                            <input type="number" id="modal_porcentaje_cumplimiento" name="porcentaje_cumplimiento" min="0" max="100" step="0.01" value="0.00" title="Este es un valor referencial/manual">
                         </div>
                         <div class="form-group">
                             <label for="modal_objetivo_mensual"><i class="fas fa-bullseye fa-fw"></i> Objetivo Mensual (Msgs)</label>
                            <input type="number" id="modal_objetivo_mensual" name="objetivo_mensual" min="0" step="1" value="0" title="El progreso se calcula con este valor. 0 o vacío para N/A.">
                         </div>
                    </div>
                     <div class="form-row">
                         <div class="form-group">
                             <label for="modal_plan"><i class="fas fa-tag fa-fw"></i> Plan Asignado</label>
                             <input type="text" id="modal_plan" name="plan" placeholder="Ej: base, premium">
                         </div>
                         <div class="form-group">
                             <label for="modal_tipo_cuenta"><i class="fas fa-briefcase fa-fw"></i> Tipo Cuenta</label>
                             <!-- **** MODIFICADO: Sin value, con placeholder **** -->
                             <input type="text" id="modal_tipo_cuenta" name="tipo_cuenta" placeholder="Se autocompletará si selecciona un cliente">
                             <!-- **** FIN MODIFICADO **** -->
                         </div>
                     </div>
                    <div class="form-row">
                         <div class="form-group">
                             <label for="modal_fecha_ingreso"><i class="far fa-calendar-alt fa-fw"></i> Fecha Ingreso</label>
                            <input type="date" id="modal_fecha_ingreso" name="fecha_ingreso">
                         </div>
                         <div class="form-group">
                             <label for="modal_estado"><i class="fas fa-toggle-on fa-fw"></i> Estado</label>
                            <select id="modal_estado" name="estado">
                                <option value="Al dia" selected>Al dia</option> <%# Debería ser 'Al día'? Ajusta según tus valores %>
                                <option value="1 - 5">1 - 5</option>
                                <option value="5 a 15">5 a 15</option>
                                <option value="+15">+15</option>
                                <option value="Activo">Activo</option> <%# Considera si 'Al día' y 'Activo' son distintos %>
                                <option value="Inactivo">Inactivo</option>
                            </select>
                         </div>
                    </div>
                    <div class="form-group">
                        <label for="modal_notas_auditoria"><i class="far fa-clipboard fa-fw"></i> Notas / Comentarios</label>
                        <textarea id="modal_notas_auditoria" name="notas_auditoria" rows="3"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" onclick="closeVendedorModal()">Cancelar</button>
                    <button type="submit" class="btn btn-primary"><i class="fas fa-save"></i> Guardar</button>
                </div>
            </form>
        </div>
    </div>

    <!-- ============================================= -->
    <!--      MODAL REGISTRAR DESEMPEÑO DIARIO         -->
    <!-- ============================================= -->
    <div id="desempenoModalOverlay" class="modal-overlay">
        <div class="modal-content" id="desempenoModalContent">
            <form id="desempeno-form" onsubmit="submitDesempeno(event)">
                <div class="modal-header">
                    <h5 class="modal-title" id="desempenoModalLabel">Registrar Desempeño Diario</h5>
                    <button type="button" class="modal-close-btn" onclick="closeDesempenoModal()" title="Cerrar">×</button>
                </div>
                <div class="modal-body custom-scrollbar">
                    <input type="hidden" id="desempeno_vendedor_id" name="vendedor_id">
                    <div class="form-group">
                        <label for="desempeno_fecha"><i class="far fa-calendar-alt fa-fw"></i> Fecha del Registro</label>
                        <input type="date" id="desempeno_fecha" name="fecha" value="<%= typeof today !== 'undefined' ? today : new Date().toISOString().slice(0,10) %>" required>
                    </div>

                    <div class="form-group">
                        <label for="desempeno_notas"><i class="fas fa-clipboard-check fa-fw"></i> Notas de Auditoría</label>
                        <textarea id="desempeno_notas" name="notas_auditoria" rows="2" placeholder="Observaciones o comentarios relevantes..."></textarea>
                    </div>

                    <hr class="modal-hr">
                    <label class="accounts-title"><i class="fas fa-tasks"></i> Ingresar Datos por Cuenta:</label>
                    <div id="desempeno-accounts-container">
                        <%# El contenido se genera dinámicamente por JS al abrir el modal %>
                        <p class="no-data">Seleccione un Cliente para cargar cuentas.</p>
                    </div>
                    <div id="desempeno-feedback" class="feedback-message"></div> <%# Para mostrar mensajes AJAX %>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" onclick="closeDesempenoModal()">Cancelar</button>
                    <button type="submit" class="btn btn-primary"><i class="fas fa-check-circle"></i> Guardar Desempeño</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Scripts (Navbar, Lógica Vendedores) -->
    <script defer src="/static/js/navbar.js"></script>

    <%# Script inline para filtros y manejo de UI (se mantiene) %>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const toggleBtn = document.getElementById('toggle-resumen');
            const resumenList = document.getElementById('resumen-list');
            const resumenTableBody = resumenList ? resumenList.querySelector('tbody') : null;
            const cardsContainer = document.getElementById('vendedor-cards-container');
            const sellerNameFilter = document.getElementById('seller-name-filter');
            const planFilter = document.getElementById('plan-filter');
            const noSellerMsg = document.getElementById('no-seller-found-message');
            const showAllBtn = document.getElementById('show-all-btn');

            // Configuración inicial
            if (cardsContainer) cardsContainer.style.display = 'none'; // Ocultar cards por defecto
            if (showAllBtn) showAllBtn.style.display = 'inline-block'; // Mostrar botón "Mostrar Todos"

            // Toggle para expandir/contraer el resumen
            if (toggleBtn && resumenList) {
                toggleBtn.addEventListener('click', function() {
                    const isCollapsed = resumenList.classList.toggle('collapsed');
                    const icon = this.querySelector('i');
                    icon.className = isCollapsed ? 'fas fa-chevron-down' : 'fas fa-chevron-up';
                    // Acceder al nodo de texto después del icono para cambiar el texto
                    const textNode = this.childNodes[1];
                    if (textNode && textNode.nodeType === Node.TEXT_NODE) {
                        textNode.nodeValue = isCollapsed ? ' Expandir' : ' Contraer';
                    }
                });
            }

            // --- FUNCIÓN CENTRALIZADA DE FILTRADO ---
            function applyFilters() {
                if (!resumenTableBody && !cardsContainer) return;

                const nameValue = sellerNameFilter.value.toLowerCase().trim();
                const planValue = planFilter.value.toLowerCase(); // Ya está en minúsculas por el EJS

                let resumenVisibleCount = 0;
                let cardsVisibleCount = 0;
                // Verificar si las cards están VISIBLES globalmente (no solo display:none)
                const cardsAreGloballyVisible = cardsContainer && !cardsContainer.hasAttribute('style') || cardsContainer.style.display === 'grid';

                // 1. Filtrar en el resumen (siempre visible)
                if (resumenTableBody) {
                    document.querySelectorAll('.resumen-item').forEach(row => {
                        const nombre = row.dataset.nombre || '';
                        const plan = row.dataset.plan || ''; // Ya está en minúsculas por el EJS

                        const nameMatch = nombre.includes(nameValue);
                        const planMatch = (planValue === '' || plan === planValue);

                        const isVisible = nameMatch && planMatch;
                        row.style.display = isVisible ? '' : 'none'; // '' revierte a display de tabla
                        if (isVisible) resumenVisibleCount++;
                    });
                }

                // 2. Filtrar en las cards (SOLO si el contenedor de cards está visible)
                if (cardsAreGloballyVisible && cardsContainer) {
                    document.querySelectorAll('.vendedor-card').forEach(card => {
                        // Si las cards fueron filtradas por ID, ignoramos los filtros generales
                        if (cardsContainer.dataset.filteredById && card.id !== cardsContainer.dataset.filteredById) {
                            card.style.display = 'none';
                            return; // Pasar a la siguiente card
                        }

                        const nombre = card.dataset.nombre || '';
                        const plan = card.dataset.plan || '';

                        const nameMatch = nombre.includes(nameValue);
                        const planMatch = (planValue === '' || plan === planValue);

                        const isVisible = nameMatch && planMatch;
                        card.style.display = isVisible ? 'block' : 'none'; // 'block' para cards
                        if (isVisible) cardsVisibleCount++;
                    });
                }

                // 3. Mostrar/Ocultar mensaje "No encontrado"
                 const showNoSellerMsg = resumenVisibleCount === 0 && (!cardsAreGloballyVisible || cardsVisibleCount === 0);
                 if (noSellerMsg) {
                     noSellerMsg.style.display = showNoSellerMsg ? 'block' : 'none';
                 }
            }

            // --- EVENT LISTENERS PARA FILTROS ---
            if (sellerNameFilter) {
                sellerNameFilter.addEventListener('input', applyFilters);
            }
            if (planFilter) {
                planFilter.addEventListener('change', applyFilters);
            }

            // Clic en item del resumen muestra la card correspondiente y oculta las demás
            if (resumenTableBody) {
                resumenTableBody.addEventListener('click', function(event) {
                    const targetRow = event.target.closest('.resumen-item');
                    if (!targetRow) return;

                    const vendedorId = targetRow.getAttribute('data-vendedor-id');
                    const cardId = `vendedor-card-${vendedorId}`;
                    const targetCard = document.getElementById(cardId);

                    if (targetCard && cardsContainer) {
                        cardsContainer.style.display = 'grid'; // Asegurarse que el grid esté visible
                        cardsContainer.classList.add('visible');
                        cardsContainer.dataset.filteredById = cardId; // Marcar que filtramos por ID

                        // Oculta TODAS las cards primero
                        document.querySelectorAll('.vendedor-card').forEach(c => {
                            c.style.display = 'none';
                        });
                         // Muestra SOLO la seleccionada
                        targetCard.style.display = 'block';

                        // Opcional: Quitar highlight de otras cards si lo hubiera
                        document.querySelectorAll('.vendedor-card.highlighted').forEach(h => h.classList.remove('highlighted'));

                        // Scroll y highlight
                        targetCard.scrollIntoView({ behavior: 'smooth', block: 'center' });
                        targetCard.classList.add('highlighted');
                        setTimeout(() => targetCard.classList.remove('highlighted'), 2000); // Quita highlight después de 2s

                        if (noSellerMsg) noSellerMsg.style.display = 'none'; // Ocultar msg no encontrado al seleccionar uno
                        applyFilters(); // Reaplicar filtros (para que el conteo se actualice, aunque solo una sea visible)
                    }
                });
            }

            // Lógica del botón "Mostrar Todos"
            if (showAllBtn) {
                showAllBtn.addEventListener('click', function() {
                    if (cardsContainer) {
                         cardsContainer.style.display = 'grid'; // Mostrar grid
                         cardsContainer.classList.add('visible');
                         delete cardsContainer.dataset.filteredById; // Quitar filtro por ID
                    }
                    // Resetear filtros
                    if(sellerNameFilter) sellerNameFilter.value = '';
                    if(planFilter) planFilter.value = '';

                    // Re-aplicar filtros (ahora vacíos) para mostrar todo
                    applyFilters();

                    // Asegurar que no quede el mensaje "no encontrado" si ahora hay resultados
                    if (noSellerMsg && document.querySelectorAll('.vendedor-card[style*="display: block"]').length > 0) {
                       noSellerMsg.style.display = 'none';
                    }
                });
            }

            // Llamada inicial para aplicar filtros si hay valores pre-cargados (poco probable aquí)
            applyFilters();
        });
    </script>

    <!-- **** NUEVO: Embed client details data **** -->
    <!-- Colocar ANTES del script vendedores_manager.js -->
    <script>
      // Pasar el mapa de detalles de cliente desde el backend a JS
      // Asegurarse que clientDetailsMap es pasado correctamente en res.render
      const clientDetailsData = <%- JSON.stringify(clientDetailsMap || {}) %>;
      // console.log("Client Details Data:", clientDetailsData); // Para depuración en el navegador
    </script>

    <%# Incluir el script de vendedores_manager.js DESPUÉS del script inline y del data script %>
    <script defer src="/static/js/vendedores_manager.js"></script>

</body>
</html>